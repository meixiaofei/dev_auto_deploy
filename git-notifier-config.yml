# set to true if you want to ignore empty merge messages
ignore_merge: true

# Optional parameter for the subject-line of the mail
# emailprefix: GIT

# Set limit on maximum number of lines per file diff
lines_per_diff: 300

# Show file list only when too many files
too_many_files: 150

# Show summary before changes
show_summary: true

# Whether to expand css inline. May be compatible with more mail readers
# but consumes much more space and more cpu. Defaults to true
# expand_css: true

# Determine whether to add plaintext alternative section to generated email.
# This allows text-only readers an option, but greatly increases the size
# of generated emails. Defaults to true
# add_plaintext: true

# Put the recepients in the Bcc field. This only applies if the delivery_method
# is not nntp. Defaults to false
bcc_recepients: false

# Subject: the subject may be set by specifying a template.
#
# Substitution into the template is available for the following
# words, via the form ${word}
#
#     prefix                - The emailprefix set, defaulting to repo_name
#     repo_name             - Name of the git repo
#     branch_name           - Name of the git branch
#     slash_branch_name     - /branch_name (master is "" unless show_master_branch_name)
#     commit_id             - The git commit id (hash)
#     short_commit_id       - The abbreviated git commit id (first 7 digits of the hash)
#     description           - The git description tag ("git describe --always")
#     message               - The commit message
#     commit_number         - The commit number within the push; 1-based
#     commit_count          - The number of commits within the push
#     commit_count_phrase   - The number of commits, as "1 commit", "2 commits", etc.
#     commit_count_phrase2  - "2 commits: ", "3 commits: ", etc, or "" if just one
#
# The default subject template varies a little depending on whether
# or not group_email_by_push is set.
#
#subject: "[${prefix}${slash_branch_name}] ${commit_count_phrase2}${message}"
#subject: "[${prefix}${slash_branch_name}][${commit_number}] ${message}"

# defines what branches to email for (defaults to all)
# include_branches: ['master', 'some_other_branch']
# include_branches: 'master, some_other_branch'
# include_branches:
#   - master
#   - some_other_branch

# The recipient (or newsgroup for nntp) for the commit
# It can send to multiple destinations, just separate email addresses by ",".
#mailinglist: liufei02@sunlands.com,wangyaoguang@sunlands.com,dongmi@sunlands.com,shuxinman@sunlands.com,licunyan@sunlands.com,wangting04@sunlands.com
mailinglist: liufei02@sunlands.com

#mailinglist: 467458776@qq.com,liufei02@sunlands.com
# or setup mailing list per branch
# mailinglist:
#   master: developers@example.com,dev2@example.com,dev3@example.com,cto@example.com
#   default: otherbranches@example.com

# If set to true, the committer (author) will receive the commit mail as well.
send_mail_to_committer: false

# If set to true, the notifier will check first for a git config hooks.mailinglist
# variable and use the recipients listed there before checking for the recipient(s)
# listed above. If false, uses the receipient(s) above if defined, regardless
# of the git config variable. Defaults to false.
prefer_git_config_mailinglist: false

# The from address. If not defined it will use
# the address that is configured in git
#from: git-notification@sunlands.com
from: liufei02@sunlands.com
#from: 2595048682@qq.com

# If reply_to_author is set to true, the Reply-To address is same as the author's
# email address, if not it will be same as the from address.
# Note that you cannot set both, this and reply_to_mailinglist true!
# Defaults to false
# reply_to_author: false

# If reply_to_mailinglist is set to true, the Reply-To address is same as the recipient
# email address, or if that is missing, the same as hooks.mailinglist. If not it will be
# same as the from address. Note that you cannot set both, this and reply_to_author true!
# Defaults to false
# reply_to_mailinglist: false

# stylesheet file (embedded template/styles.css by default)
# stylesheet: /absolute/path/to/readable/stylesheet.css

# custom template file (embedded template/email.html.erb)
# custom_template: /absolute/path/to/readable/email.html.erb

# select the delivery method: smtp, nntp, sendmail, or debug
delivery_method: smtp

# Optionally group email by push: don't send an email for each commit when true.
# group_email_by_push: false

smtp_server0:
  address: localhost
  port: 1025
  domain: localhost
  user_name: user@localhost
  password: password
  authentication: plain
  enable_tls: false

smtp_server:
  address: smtp.sunlands.com
  port: 25
  domain: smtp.sunlands.com
  user_name: liufei02@sunlands.com
  password: hereisthepwd
  authentication: plain
  enable_tls: false

# settings for the tls smtp server (gmail,etc)
# If you use gmail, just uncomment follow section and configure password
#smtp_server:
#  address: smtp.gmail.com
#  port: 587
#  domain: smtp.gmail.com
#  user_name: username@gmail.com
#  password: password
#  authentication: plain
#  enable_tls: true

# settings for sendmail
sendmail_options:
  location: /usr/sbin/sendmail
  arguments: -i -t

# settings for nntp/newsgroup
nntp_settings:
  address: your.nntp.host.here
  port: 119

# Decorate files and commit ids with link to a webview. Possible values: none, gitweb,
# gitorious, cgit, trac, gitlabhq, gitalist, github, redmine, or stash
link_files: none

# If link_files is set to "gitweb", you need to configure the path to your gitweb
# instance and the project name.
gitweb:
  path: http://developerserver/path_to_gitweb
  project: test.git

# If link_files is set to "gitorious", you need to configure the path to your gitorious
# instance, the project name and the repository name.
gitorious:
  path: http://example.com/path_to_gitorious
  project: backend
  repository: sql-scripts

# if link_files is set to "cgit", you need to configure the path to your cgit
cgit:
  path: http://example.com/path_to_cgit
  project: project-name
# project defaults to git repository name


# If link_files is set to "trac", you need to configure the path to your trac
# instance
trac:
  path: http://example.com/changeset
# repository: test.git
# repository defaults to nil (link to trac's default repository)

# If link_files is set to "gitlabhq", you need to configure the path to your gitlabhq
# instance
gitlabhq:
  path: http://gitlabhq.example.com
  version: 1.2

# If link_files is set to "gitalist", you need to configure the path to your gitalist
# instance
gitalist:
  path: http://gitalist.example.com
  project: test.git

# If link_files is set to "github", you need to configure the project name of
# your GitHub account
github:
  path: https://github.com
  project: project-name

# If link_files is set to "redmine", you need to configure the path to your redmine
# instance
redmine:
  path: http://redmine.example.com
# project: project-name
# keywords: [refs, fixes]
# project defaults to git repository name, keywords defaults to refs, fixes (for use with message_integration)

# if link_files is set to "stash", you need to configure the path to your stash
# instance
stash:
  path: http://stash.example.com

# commit message URL map
message_map:
#  '\brefs\s*\#(\d+)': 'http://example.com/redmine/issues/show/\1'

# Uncomment if you want to create links in your commit text
message_integration:
#  mediawiki: http://example.com/wiki # will rework [[text]] to MediaWiki pages
#  redmine: http://redmine.example.com # will rework refs #123 to Redmine issues
#  bugzilla: http://bz.example.com # will rework BUG 123 to Bugzilla bugs
#  fogbugz: http://yourondemand.fogbugz.com/? # will rework BugzId: 123 to FogBugz cases

# Track unique commits per branch?
# The name of this option is confusing.
#
# If set to false, notifications are issued only for commits that are unique to the current branch.
# If set to true, notifications are issued for any commit on the current branch, whether or not
# it also occurs on other branches.
#
# In other words, setting this to false will filter out commits that have already been displayed
# at some time in the past, for another branch. The confusing "unique" in the option name can
# be thought of as implying that commits for each branch are considered in isolation, without
# considering other branches.
unique_commits_per_branch: false

# Skip commits older than N days
skip_commits_older_than: 7

show_master_branch_name: true

# ignore whitespace?
#  all: ignore all whitespace (same as true)
#  change: ignore changes in amount of whitespace
#  none: do not ignore any whitespace (same as false)
ignore_whitespace: all

# adding parameters to send webhooks
# webooks:
#  url: http://example.com:8081/commits

# Adding the similarity detection threshold parameter used by the -M flag when detecting renames
#
# The value is a number between 0 and 1
# with 0 signifying 0% and 1 signifying 100%.
# The Default value is 0.5, meaning, git will consider a delete/add pair as a rename if
# more than 50% of it has not changed
similarity_detection_threshold: "0.5"

# Show a shortlog of commits since the last tag, when creating an annotated tag
#
# Note :: this feature uses git-describe to obtain the information
# So, if git-describe is not one of your favourite ways to find the nearest tagged-commit, you will refrain from using this feature
#
show_a_shortlog_of_commits_since_the_last_annotated_tag: false

# This is developer debugging options. Do not uncomment it if You aren't Jedi
# debug:
#   enabled: true
#   log_directory: /path/to/log/directory


